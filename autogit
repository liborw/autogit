#!/usr/bin/env python3

"""Automatic GIT

Usage:
    autogit [options] <path>

Options:
    -h, --help
    -p NUM, --period NUM        [default: 1]
    -d, --debug
"""

from docopt import docopt
import git
import logging as log
import os.path
import sys
import time

DEFAUT_PATH = '~/.autogit'


class Autogit(object):

    def __init__(self, path):
        self.path = path

    def process_repo(self, repo):
        pass


def main():
    opt = docopt(__doc__)
    setup_logging(opt)

    # log command line arguments
    log.debug("Args: \n%s", str(opt))

    if opt['<path>']:
        path = opt['<path>']
    else:
        path = DEFAUT_PATH

    period = int(opt['--period'])

    # find all git repositories under the path
    repos = find_repos(path)

    if len(repos) <= 0:
        log.warn('No repo found')
        sys.exit(1)
    else:
        log.info('Found %d repos', len(repos))

    # main loop
    running = True
    while running:
        for repo in repos:
            try:
                process_repo(repo)
            except Exception as e:
                log.error("%s", str(e))
            time.sleep(period*60)

# http://stackoverflow.com/questions/15849640/how-to-get-count-of-unpublished-commit-with-gitpython/15862203#15862203
# http://masnun.com/2012/01/22/fetching-remote-git-repo-with-python-in-a-few-lines-of-codes.html

def process_repo(repo):
    log.info("Precessing %s", repo.working_dir)

    # check local chages
    if repo.is_dirty():
        repo.git.add(all=True)
        repo.git.commit(m="Autogit")
        log.info(" - Commited local changes")

    if repo.remotes:
        remote = repo.remote()
        remote.fetch()

        commits_behind = len(repo.iter_commits('master..origin/master'))
        commits_ahead = len(repo.iter_commits('origin/master..master'))
        log.info("Commits ahead: %d behind: %d", commits_ahead, commits_behind)

        if commits_behind > 0:
            if commits_ahead > 0:
                # rebase
                log.warn("Rebase not implemented yet")
            else:
                remote.pull()

        if commits_ahead > 0:
            remote.push()

    # fetch
    # merge rebase
    # push


def find_repos(path):
    repos = []
    if is_repo(path):
        log.debug("Found repo: %s", path)
        repos.append(git.Repo(path))
    else:
        for p in os.listdir(path):
            if os.path.isdir(p) and is_repo(p):
                log.debug("Found repo: %s", path)
                repos.append(git.Repo(p))
    return repos


def is_repo(path):
    return os.path.exists(os.path.join(path, '.git'))


def setup_logging(opt):
    log.basicConfig(level='DEBUG' if opt['--debug'] else 'INFO')

if __name__ == '__main__':
    main()
